Synapse Client-Server API
=========================

Terminology
-----------
baseVer : The base version of the client. 
Every event sent to the client has a 'ver' which must be persisted on the client. When the client next connects to the server, they should
provide the last 'ver' they received from the server. This lets the server know where in the event stream the client is. These versions
are completely opaque, and the client cannot infer anything from them.

eventId : The ID of an event sent by the client.
Clients can send events to the server to send messages, join and leave rooms, and so on. Each event action should have a unique ID so
client actions are idempotent.

msgId : The ID of a message sent by a client in a room.
Clients send IMs to each other in rooms. Each IM must have a unique message ID which is unique for that particular client.

userId : The username of the client.
When registering for an account, the client specifies their username. They use this to login and it forms part of their synapseId.

synapseUserId : The userId@host style ID for the client.
Clients register accounts with home servers. These servers have their own unique hostname. When federating between home servers, the
synapseId is used to uniquely identify users across multiple home servers.

roomId : The ID of a room on a home server.
When rooms are created, the client either specifies or is allocated a room ID. This room ID must be used to send messages in that room.

synapseRoomId : The roomId@host style ID for the room.
Like with clients, there may be multiple rooms with the same ID across multiple home servers. The synapseRoomId is used to uniquely
identify a room when federating.

globalMsgId : The globally unique ID for a message.
This ID is formed from the msgId, the client's synapseUserId and the synapseRoomId. This uniquely identifies any message. It is represented
with '-' as the delimeter between IDs. The globalMsgId is of the form: synapseRoomId-synapseUserId-msgId


Data Types
----------
All data is represented as JSON.

The 'type' key
--------------
This is the type of event being sent/received. Most data is sent and received as events. The event type is used to differentiate between 
events, and can be expanded upon by using different namespaces. Every event MUST have a 'type' key.

Valid event types:
  sy.message.* : A message
  sy.room.create : Create a room
  sy.room.join : Join a room
  sy.room.leave : Leave a room
  sy.room.topic : The topic for a room
  sy.room.list : A list of rooms

Event Data
----------
All events are represented in JSON. They follow the format:
{
  type : $EVENT_TYPE,
  params : {
             $TYPE_SPECIFIC_FIELDS
           }
}
For a list of type specific fields, see the Event Types section.

Error Responses
---------------
If the client sends an invalid request, the server MAY respond with an error response. This is of the form:
{
  "error" : "string",
  "code" : integer
}
The 'error' string will be a human-readable error message.


HTTP API
========

Events
------
To receive all incoming messages and events:
  GET /events?baseVer=$BASE_VER
  Returns (success): A JSON array of Event Data (sy.*).
  Returns (failure): An Error Response

To send an event:
  PUT /events/$EVENT_ID
  With: Event Data (sy.*)
  Returns (success): 200 OK if the event was processed.
  Returns (failure): An Error Response

Rooms
-----
To create a room with a room ID:
  PUT /rooms/$ROOM_ID
  With: Event Data (sy.room.create)
  Returns (success): 200 OK if the room was created.
  Returns (failure): An Error Response. If the room ID was taken, this may also contain a 'roomId' key suggesting an 
                     alternative room ID.

To create a room and have a room ID allocated for you:
  POST /rooms
  With: Event Data (sy.room.create)
  Returns (success): 200 OK if the room was created. This will also return a JSON object with 'roomId' containing the
                     allocated room ID.
  Returns (failure): An Error Response.

To join/leave a room:
  PUT /rooms/$ROOM_ID
  With: Event Data (sy.room.join or sy.room.leave)
  Returns (success): 200 OK if the room was joined.
  Returns (failure): An Error Response.

To see a list of public rooms:
  GET /rooms
  With query parameters:
    limit (integer) : The max number of rooms to return.
    start (integer) : The 0-based start index to start returning rooms from.
  Returns (success): A "sy.room.list" Event
  Returns (failure): An Error Response


Event Types
===========
For each event, there are additional values which can appear in "params". The following is a list of these parameters. Some of 
them are REQUIRED, and these have been marked with **. Keys not marked with ** are optional.

Type: sy.room.create
--------------------
Can optionally specify a topic for the room, and toggle the visibility.
Params:
{
  "topic" : "string",
  "visibility" : "private|public",
}

Type: sy.room.join
------------------
No additional parameters at this time.

Type: sy.room.leave
-------------------
No additional parameters at this time.

Type: sy.room.topic
-------------------
Contains the topic.
Params:
{
  **"topic"** : "string",
}

Type: sy.room.list
------------------
Gets a (partial) list of rooms. If it is a partial list, then there should be a 'total' which is the total number
of rooms, and 'start' which is the 0-based start index of the rooms in 'rooms'.
Params:
{
  **"rooms"** : JSON array of RoomInfo JSON objects,
  "total" : integer,
  "start" : integer
}
RoomInfo:
{
  **"roomId"** : "string",
  "topic" : "string",
  "num_members" : integer
}

Type: sy.message.*
------------------
Contains message content. This can be broken down into sub-types for messages with attachments. However, all message types must have
the following parameters.
Params:
{
  **"roomId"** : "string [synapseRoomId|roomId]",
  **"msgId"** : "string",
  **"from"** : "string [synapseUserId]",
}
The server may replace the "from" key with your real synapseUserId if there is a mismatch to prevent clients masquerading as another user.
There may be additional keys depending on what the message subtype is:
   
  sy.message.text:
    **"body"** : "string"

  sy.message.emote:
    **"body"** : "string"

  sy.message.location:
    **"location"** : "string (geo URI)"

  sy.message.image:
    **"url"** : "string (URL to image)",
    "info" : JSON object (ImageInfo),
    "thumbnail_url" : "string (URL to image)",
    "thumbnail_info" : JSON object (ImageInfo)

    ImageInfo {
      "size" : integer (size of image in bytes),
      "w" : integer (width of image in pixels),
      "h" : integer (height of image in pixels),
      "mimetype" : "string (e.g. image/jpeg)"
    }

  sy.message.audio:
    **"url"** : "string (URL to audio)",
    "info" : JSON object (AudioInfo)

    AudioInfo {
      "mimetype" : "string (e.g. audio/aac)",
      "size" : integer (size of audio in bytes),
      "duration" : integer (duration of audio in milliseconds)
    }

  sy.message.video:
    **"url"** : "string (URL to video)",
    "info" : JSON object (VideoInfo)

    VideoInfo {
      "mimetype" : "string (e.g. video/mp4)",
      "size" : integer (size of video in bytes),
      "duration" : integer (duration of video in milliseconds),
      "w" : integer (width of video in pixels),
      "h" : integer (height of video in pixels),
      "thumbnail_url" : "string (URL to image)",
      "thumbanil_info" : JSON object (ImageInfo)
    }
    
If the type is "sy.message", it is assumed to be "sy.message.text".

Registration
============
All requests made to the server must contain an 'access_token' query parameter. You must register to get a token.

Registering for an account
--------------------------
  PUT /register
  With: A JSON object containing the key "user_id" which contains the desired userId, or an
        empty JSON object to have the server allocate a userId automatically.
  Returns (success): 200 OK with a JSON object:
                     {
                       "user_id" : "string [synapseUserId]",
                       "access_token" : "string"
                     }
  Returns (failure): An Error Response.
                     

Unregistering an account
------------------------
  PUT /unregister
  With query parameters: access_token=$ACCESS_TOKEN
  Returns (success): 200 OK
  Returns (failure): An Error Response.


